import 'dart:convert';
import 'package:flutter/material.dart';
import 'package:flutter_custom_tabs/flutter_custom_tabs.dart';
import 'package:http/http.dart' as http;

void main() {
  runApp(const MyApp());
}

class MyApp extends StatelessWidget {
  const MyApp({super.key});

  @override
  Widget build(BuildContext context) {
    return MaterialApp(
      title: 'Lemon Squeezy Checkout',
      theme: ThemeData(
        primarySwatch: Colors.blue,
      ),
      home: const CheckoutPage(),
    );
  }
}

class CheckoutPage extends StatefulWidget {
  const CheckoutPage({super.key});

  @override
  State<CheckoutPage> createState() => _CheckoutPageState();
}

class _CheckoutPageState extends State<CheckoutPage> {
  bool isLoading = false;
  String? checkoutUrl;

  final String apiKey ='';
  final String storeId = '174347'; // Replace with your Store ID
  final String variantId = '778241'; // Replace with your Product Variant ID

  Future<void> createCheckoutUrl() async {
    setState(() {
      isLoading = true;
    });

    final response = await http.post(
      Uri.parse('https://api.lemonsqueezy.com/v1/checkouts'),
      headers: {
        'Authorization': 'Bearer $apiKey',
        'Content-Type': 'application/vnd.api+json',
        'Accept': 'application/vnd.api+json',
      },
      body: jsonEncode({
        "data": {
          "type": "checkouts",
          "attributes": {
            "checkout_data": {
              "custom": {
                "email": "moud64013@gmail.com" // بيانات مخصصة
              }
            },
          },
          "relationships": {
            "store": {
              "data": {"type": "stores", "id": storeId}
            },
            "variant": {
              "data": {"type": "variants", "id": variantId}
            }
          }
        }
      }),
    );

    setState(() {
      isLoading = false;
    });

    if (response.statusCode == 201) {
      final data = jsonDecode(response.body);
      final String url = (data['data']['attributes']['url']);

      setState(() {
        checkoutUrl = url;
      });

      await launchUrl(
        Uri.parse(url),
        customTabsOptions: CustomTabsOptions(
          shareState: CustomTabsShareState.on,
          urlBarHidingEnabled: true,
          showTitle: true,
          closeButton: CustomTabsCloseButton(
            icon: CustomTabsCloseButtonIcons.back,
          ),
        ),
        safariVCOptions: SafariViewControllerOptions(
          barCollapsingEnabled: true,
          dismissButtonStyle: SafariViewControllerDismissButtonStyle.close,
        ),
      );
    } else {
      throw Exception('Failed to create checkout');
    }
  }

  Future<int> getOrders() async {
    final response = await http
        .get(Uri.parse('https://api.lemonsqueezy.com/v1/orders'), headers: {
      'Authorization': 'Bearer $apiKey',
      'Content-Type': 'application/vnd.api+json',
      'Accept': 'application/vnd.api+json',
    });
    if (response.statusCode == 200) {
      final Map<String, dynamic> jsonResponse = json.decode(response.body);
      return jsonResponse['meta']['page']['total'];
    } else {
      throw Exception('Failed to load orders');
    }
  }

  @override
  Widget build(BuildContext context) {
    return Scaffold(
      appBar: AppBar(
        title: const Text('book store'),
      ),
      body: Center(
        child: Column(
          mainAxisAlignment: MainAxisAlignment.center,
          children: [
            Image.network(
              'https://images-na.ssl-images-amazon.com/images/S/compressed.photo.goodreads.com/books/1577622829i/50076664.jpg',
              height: 200,
            ),
            const SizedBox(height: 20),
            const Text(
              'شرح البايثون',
              style: TextStyle(fontSize: 24, fontWeight: FontWeight.bold),
            ),
            const SizedBox(height: 10),
            const Text(
              '\$9.99',
              style: TextStyle(fontSize: 20, color: Colors.green),
            ),
            const SizedBox(height: 30),
            isLoading
                ? const CircularProgressIndicator()
                : ElevatedButton(
                    onPressed: createCheckoutUrl,
                    child: const Text('شراء الآن'),
                  ),
            FutureBuilder<int>(
              future: getOrders(),
              builder: (context, snapshot) {
                if (snapshot.connectionState == ConnectionState.waiting) {
                  return Text('Loading...');
                } else if (snapshot.hasError) {
                  return Text('Error: ${snapshot.error}');
                } else {
                  return Text('الطلبات: ${snapshot.data}');
                }
              },
            ),
            ElevatedButton(
              onPressed: () {
                setState(() {}); // This will call getOrders() again
              },
              child: Text('تحديث'),
            )
          ],
        ),
      ),
    );
  }
}
